package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.*;
import lyc.compiler.constants.TipoDePuntero;
import lyc.compiler.constants.Comparadores;
import lyc.compiler.files.*;
import lyc.compiler.model.*;

class Parser;

parser code{:
    private SymbolTableGenerator tablaDeSimbolos = SymbolTableGenerator.getInstance();
	private TercetoCodigoIntermedio codigoIntermedio = TercetoCodigoIntermedio.getInstance();
	private Comparadores comparadores = new Comparadores();
	private Integer aux;
	private Integer cont;
	private String ultimoTipoDeDato;
:}

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal IDENTIFIER;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal SEMICOLON;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal INIT;
terminal INT;
terminal FLOAT;
terminal STRING;
terminal COMMA;
terminal COLON;
terminal LOWER_THAN;
terminal GREATER_THAN;
terminal LOWER_EQUALS_THAN;
terminal GREATER_EQUALS_THAN;
terminal EQUALS;
terminal NOT;
terminal AND;
terminal OR;
terminal WRITE;
terminal READ;
terminal IGUALES;
terminal REPEAT;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal FOR;

// Non Terminals
non terminal program;
non terminal init_block;
non terminal declarations;
non terminal declaration;
non terminal variables;
non terminal data_type;
non terminal sentences;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal conditional;
non terminal conditions;
non terminal condition;
non terminal comparator;
non terminal sentences_block;
non terminal if_block;
non terminal else_block;
non terminal if_else_block;
non terminal if_sentence;
non terminal while_block;
non terminal while_sentence;
non terminal write_parameter;
non terminal function;
non terminal list_expression;

// Start Symbol Definition
start with program;

//*     MAIN      *//
program ::= init_block sentences {: System.out.println("Regla0: programa"); codigoIntermedio.mostrarTercetos(); IntermediateCodeGenerator.getInstance().setIntermediateCode(codigoIntermedio); :};


//*     INIT BLOCK      *//
init_block ::= INIT OPEN_CURLY_BRACKET declarations CLOSE_CURLY_BRACKET {: System.out.println("Regla0.1: init"); :};

declarations ::= declarations declaration {: System.out.println("Regla0.2: declaracions"); :};

declarations ::= declaration {:
    System.out.println("Regla0.3: declaracions");
:};

declaration ::= variables COLON data_type {:
    while(!codigoIntermedio.pilaVariablesVacia()) {
        String id = codigoIntermedio.desapilarVariable();
        tablaDeSimbolos.update(id, ultimoTipoDeDato);
    }
    System.out.println("Regla0.4: declaracion");
:};

variables ::= variables COMMA IDENTIFIER:id {:
    codigoIntermedio.apilarVariable(id.toString());
    System.out.println("Regla0.5: variables , " + id);
:};

variables ::= IDENTIFIER:id {:
    codigoIntermedio.apilarVariable(id.toString());
    System.out.println("Regla0.6: Variable " + id);
:};

data_type ::= INT {: ultimoTipoDeDato = "Entero"; :};

data_type ::= STRING {: ultimoTipoDeDato = "Cadena"; :};

data_type ::= FLOAT {: ultimoTipoDeDato = "Flotante"; :};


//*     SENTENCES     *//
sentences ::= sentences sentence {: System.out.println("Regla1: Sentencias"); :};

sentences ::= sentence {: System.out.println("Regla2: Sentencias;"); :};

sentence ::= assignment {: System.out.println("Regla3: Sentencia ASSIGN"); :};

sentence ::= if_block | if_else_block | while_block {: System.out.println("Regla3: Sentencia"); :};

sentence ::= function {: System.out.println("Regla3: Sentencia Function"); :};

sentences_block ::= OPEN_CURLY_BRACKET sentences CLOSE_CURLY_BRACKET {: System.out.println("Regla3: Sentencia Block"); :};


//*     ASIGNACIONES     *//
assignment ::= IDENTIFIER:id ASSIG expression {:
    tablaDeSimbolos.verificarTipo(id.toString());
    codigoIntermedio.insertarTerceto(null, "=", codigoIntermedio.insertarTerceto(null, id.toString()), codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pExpresion));
    System.out.println("Regla4: Assignment " + id  + " = expresion");
:};

assignment ::= IDENTIFIER:id ASSIG STRING_CONSTANT:str {:
    tablaDeSimbolos.verificarTipo(id.toString());
   // tablaDeSimbolos.update("_" + str.toString(), "Cadena");
    codigoIntermedio.insertarTerceto(null, "=", codigoIntermedio.insertarTerceto(null, id.toString()), codigoIntermedio.insertarTerceto(null, str.toString()));
    System.out.println("Regla4.1: Assignment " + id  + " = " + str);
:};

assignment ::= IDENTIFIER:id ASSIG function {:
    tablaDeSimbolos.verificarTipo(id.toString());
    codigoIntermedio.insertarTerceto(null, "=", codigoIntermedio.insertarTerceto(null, id.toString()), codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pFuncion));
    System.out.println("Regla4.2: Assignment " + id  + " = function");
:};

//*     ARITMETICA     *//
expression ::= expression  PLUS {:
    codigoIntermedio.apilarTerceto(codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pExpresion));
    :} term {:
    codigoIntermedio.insertarTerceto(
        TipoDePuntero.pExpresion,
        "+",
        codigoIntermedio.desapilarTerceto(),
        codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pTermino));
        System.out.println("Regla5: Expresion +"
    );
:};

expression ::= expression  SUB {:
    codigoIntermedio.apilarTerceto(codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pExpresion));
    :} term {:
    codigoIntermedio.insertarTerceto(
        TipoDePuntero.pExpresion,
        "-",
        codigoIntermedio.desapilarTerceto(),
        codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pTermino)
    );
    System.out.println("Regla6: Expresion -");
:};

expression ::= term {:
    codigoIntermedio.actualizarPuntero(TipoDePuntero.pExpresion, TipoDePuntero.pTermino);
    System.out.println("Regla7: Expression = Term");
:};

term ::= term MULT {:
   codigoIntermedio.apilarTerceto(codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pTermino));
:} factor {:
    codigoIntermedio.insertarTerceto(
        TipoDePuntero.pTermino,
        "*",
        codigoIntermedio.desapilarTerceto(),
        codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pFactor)
    );
    System.out.println("Regla8: Termino *");
:};

term ::= term  DIV {:
    codigoIntermedio.apilarTerceto(codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pTermino));
:} factor {:
    codigoIntermedio.insertarTerceto(
        TipoDePuntero.pTermino,
        "/",
        codigoIntermedio.desapilarTerceto(),
        codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pFactor)
    );
    System.out.println("Regla9: Termino /");
:};

term ::= factor {:
    codigoIntermedio.actualizarPuntero(TipoDePuntero.pTermino, TipoDePuntero.pFactor);
    System.out.println("Regla10: Term = factor");
:};

factor ::= IDENTIFIER:id  {:
    tablaDeSimbolos.verificarTipo(id.toString());
    codigoIntermedio.insertarTerceto(TipoDePuntero.pFactor, id.toString());
    System.out.println("Regla11: Factor Id: " + id);
:};

factor ::= INTEGER_CONSTANT:constant {:
   // tablaDeSimbolos.update("_" + constant, "Entero");
    codigoIntermedio.insertarTerceto(TipoDePuntero.pFactor, constant.toString());
    System.out.println("Regla12: Factor Constant: " + constant );
:};

factor ::= FLOAT_CONSTANT:flotante {:
   // tablaDeSimbolos.update("_" + flotante, "Flotante");
    codigoIntermedio.insertarTerceto(TipoDePuntero.pFactor, flotante.toString());
    System.out.println("Regla13: float Factor Float: " + flotante );
:};

factor ::= OPEN_BRACKET expression CLOSE_BRACKET {:
    codigoIntermedio.actualizarPuntero(TipoDePuntero.pFactor, TipoDePuntero.pExpresion);
    System.out.println("Regla14: Factor = (Expression)");
:};

//*     BLOQUE IF      *//
if_block ::= if_sentence sentences_block {:
    codigoIntermedio.actualizarTerceto(codigoIntermedio.desapilarTerceto(), codigoIntermedio.obtenerCantidadTercetos());
:};

if_else_block ::= if_sentence sentences_block {:
    codigoIntermedio.actualizarTerceto(codigoIntermedio.desapilarTerceto(), codigoIntermedio.obtenerCantidadTercetos()+1);
    codigoIntermedio.apilarTerceto(codigoIntermedio.insertarTerceto(null, "BI"));
:} ELSE sentences_block {:
    codigoIntermedio.actualizarTerceto(codigoIntermedio.desapilarTerceto(), codigoIntermedio.obtenerCantidadTercetos());
    System.out.println("Regla14: If Else Block");
:};

if_sentence ::= IF conditional {: System.out.println("Regla14: If Sentence"); :};

//*     CONDICIONALES      *//
conditional ::= OPEN_BRACKET conditions CLOSE_BRACKET {: System.out.println("Regla14: Comparacion Exitosa"); :};

conditions ::= condition {:
    codigoIntermedio.apilarTerceto(codigoIntermedio.insertarTerceto(null, codigoIntermedio.ultimoComparadorLeido));
    System.out.println("Regla15: Condiciones condicion unica");
:};

conditions ::= condition {:
    codigoIntermedio.apilarTerceto(
        codigoIntermedio.insertarTerceto(null, codigoIntermedio.ultimoComparadorLeido, null, null)
    );
:} AND condition {:
    codigoIntermedio.actualizarTerceto(codigoIntermedio.desapilarTerceto(), codigoIntermedio.obtenerCantidadTercetos()+1);
    codigoIntermedio.apilarTerceto(
        codigoIntermedio.insertarTerceto(null, codigoIntermedio.ultimoComparadorLeido, null, null)
    );
    System.out.println("Regla16: Condicion AND Condicion");
:};

conditions ::= condition {:
    codigoIntermedio.ultimoComparadorLeido = comparadores.obtenerOpuesto(codigoIntermedio.ultimoComparadorLeido);
    codigoIntermedio.apilarTerceto(codigoIntermedio.insertarTerceto(null, codigoIntermedio.ultimoComparadorLeido));
:} OR condition {:
    codigoIntermedio.actualizarTerceto(codigoIntermedio.desapilarTerceto(), codigoIntermedio.obtenerCantidadTercetos()+1);
    codigoIntermedio.apilarTerceto(
        codigoIntermedio.insertarTerceto(null, codigoIntermedio.ultimoComparadorLeido, null, null)
    );

:};

condition ::= factor {:
    codigoIntermedio.apilarTerceto(codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pFactor));
:} comparator factor {:
    codigoIntermedio.insertarTerceto(
        null,
        "CMP",
        codigoIntermedio.desapilarTerceto(),
        codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pFactor)
    );
:};

condition ::= NOT condition {:
    codigoIntermedio.ultimoComparadorLeido = comparadores.obtenerOpuesto(codigoIntermedio.ultimoComparadorLeido);
    System.out.println("Regla19: Condicion NOT");
:};

comparator ::= EQUALS {:
    codigoIntermedio.ultimoComparadorLeido = "BNE";
    System.out.println("Regla20: Tipo de Comparador");
:};

comparator ::= LOWER_THAN {:
    codigoIntermedio.ultimoComparadorLeido = "BGE";
    System.out.println("Regla20: Tipo de Comparador");
:};

comparator ::= LOWER_EQUALS_THAN {:
    codigoIntermedio.ultimoComparadorLeido = "BGT";
    System.out.println("Regla20: Tipo de Comparador");
:};

comparator ::= GREATER_THAN {:
    codigoIntermedio.ultimoComparadorLeido = "BLE";
    System.out.println("Regla20: Tipo de Comparador");
:};

comparator ::= GREATER_EQUALS_THAN {:
    codigoIntermedio.ultimoComparadorLeido = "BLT";
    System.out.println("Regla20: Tipo de Comparador");
:};

//*     BLOQUE WHILE      *//
while_block ::= while_sentence sentences_block {:
    aux = codigoIntermedio.desapilarTerceto();
    codigoIntermedio.actualizarTerceto(aux, codigoIntermedio.obtenerCantidadTercetos()+1);
    codigoIntermedio.insertarTerceto(null, "BI", aux - 1);
    System.out.println("Regla21: While Block");
:};

while_sentence ::= WHILE conditional {: System.out.println("Regla22: While Sentence"); :};

//*     FUNCION READ       *//
function ::= READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET {:
    tablaDeSimbolos.verificarTipo(id.toString());
    codigoIntermedio.insertarTerceto(null, "READ", codigoIntermedio.insertarTerceto(null, id.toString()));
    System.out.println("Regla23: Read Sentence");
:};

//*     FUNCION WRITE       *//
function ::= WRITE OPEN_BRACKET write_parameter CLOSE_BRACKET {:
    codigoIntermedio.insertarTerceto(null, "WRITE", codigoIntermedio.obtenerCantidadTercetos()-1);
    System.out.println("Regla24: Write Sentence");
:};
write_parameter ::= IDENTIFIER:id {: tablaDeSimbolos.verificarTipo(id.toString()); codigoIntermedio.insertarTerceto(null, id.toString()); :};
write_parameter ::= INTEGER_CONSTANT:entero {: //tablaDeSimbolos.update("_" + entero, "Entero"); 
codigoIntermedio.insertarTerceto(null, entero.toString()); :};
write_parameter ::= FLOAT_CONSTANT:flotante {: //tablaDeSimbolos.update("_" + flotante, "Flotante"); 
codigoIntermedio.insertarTerceto(null, flotante.toString()); :};
write_parameter ::= STRING_CONSTANT:cadena {:// tablaDeSimbolos.update("_" + cadena.toString(), "Cadena"); 
codigoIntermedio.insertarTerceto(null, cadena.toString()); :};

//*     FUNCION IGUALES      *//
function ::= IGUALES OPEN_BRACKET expression {:
    codigoIntermedio.insertarTerceto(null, "=", codigoIntermedio.insertarTerceto(null, "@aux"), codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pExpresion));
    codigoIntermedio.insertarTerceto(null, "=", codigoIntermedio.insertarTerceto(null, "@cont"), codigoIntermedio.insertarTerceto(null, "0"));
:}COMMA OPEN_SQUARE_BRACKET list_expression CLOSE_SQUARE_BRACKET CLOSE_BRACKET {:

:};
list_expression ::= list_expression COMMA expression {:
    int posActual = codigoIntermedio.insertarTerceto(null, "CMP", codigoIntermedio.insertarTerceto(null, "@aux"), codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pExpresion));
    codigoIntermedio.insertarTerceto(null, "BNE", posActual + 7);
    int tercetoCont = codigoIntermedio.insertarTerceto(null, "+", codigoIntermedio.insertarTerceto(null, "@cont"), codigoIntermedio.insertarTerceto(null, "1"));
    codigoIntermedio.insertarTerceto(null, "=", codigoIntermedio.insertarTerceto(null, "@cont"), tercetoCont);
    System.out.println("Regla27: List Expression");
:};
list_expression ::= expression {:
    int posActual = codigoIntermedio.insertarTerceto(null, "CMP", codigoIntermedio.insertarTerceto(null, "@aux"), codigoIntermedio.obtenerTercetoDePuntero(TipoDePuntero.pExpresion));
    codigoIntermedio.insertarTerceto(null, "BNE", posActual + 7);
    int tercetoCont = codigoIntermedio.insertarTerceto(null, "+", codigoIntermedio.insertarTerceto(null, "@cont"), codigoIntermedio.insertarTerceto(null, "1"));
    codigoIntermedio.insertarTerceto(null, "=", codigoIntermedio.insertarTerceto(null, "@cont"), tercetoCont);
    System.out.println("Regla28: List Expression");
:};

//*     FUNCION REPEAT INLINE      *//
function ::= REPEAT INTEGER_CONSTANT:constant {:
   // tablaDeSimbolos.update("_" + constant, "Entero");
    codigoIntermedio.insertarTerceto(null, "=", codigoIntermedio.insertarTerceto(null, "@i"), codigoIntermedio.insertarTerceto(null, constant.toString()));
    codigoIntermedio.insertarTerceto(null, "CMP", codigoIntermedio.insertarTerceto(null, "@i"), codigoIntermedio.insertarTerceto(null, "0"));
    codigoIntermedio.apilarTerceto(codigoIntermedio.insertarTerceto(null, "BEQ"));
    int restaI = codigoIntermedio.insertarTerceto(null, "-", codigoIntermedio.insertarTerceto(null, "@i"), codigoIntermedio.insertarTerceto(null, "1"));
    codigoIntermedio.insertarTerceto(null, "-", codigoIntermedio.insertarTerceto(null, "@i"), restaI);
:} OPEN_SQUARE_BRACKET sentences CLOSE_SQUARE_BRACKET {:
    int inicioFor = codigoIntermedio.desapilarTerceto();
    codigoIntermedio.insertarTerceto(null, "BI", inicioFor-3);
    codigoIntermedio.actualizarTerceto(inicioFor, codigoIntermedio.obtenerCantidadTercetos());
    System.out.println("Regla29: Funcion REPEAT");
:};